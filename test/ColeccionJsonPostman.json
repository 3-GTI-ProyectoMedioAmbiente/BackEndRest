{
	"info": {
		"_postman_id": "48a0d6c4-f440-409f-9824-1367ccf68f06",
		"name": "Test_Servidor",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CrearUsuario",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"\r",
							"pm.test(\"La respuesta de la peticion es 200\", function () { \r",
							"    \r",
							"     pm.response.to.be.ok; // equivalente a decir que valide que sea 200\r",
							"     \r",
							"});\r",
							"// Pedimos a nuestro response payload que tengo Content-Type en el header\r",
							"pm.test(\"El header de Content-Type esta presente\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"//console.log(\"Resultado de la peticion, si es 1 se ha creado correctamente, si es -1 significa que existe un usuario con ese correo en la base de datos\")\r",
							"//console.log(pm.response)\r",
							"\r",
							"pm.test(\"La peticion tiene cuerpo\",function(){\r",
							"    pm.expect(!pm.request.body.isEmpty)\r",
							"})\r",
							"\r",
							"pm.test(\"La peticion utiliza el metodo  POST\",function(){\r",
							"    pm.expect(pm.request.method == \"POST\")\r",
							"})\r",
							"//console.log(pm.request.body)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"mail\":\"prueba123\",\"nombre\":\"Sergi\",\"apellidos\":\"Sirvent\",\"isAutobusero\":\"True\",\"fechaNacimiento\":\"2002-02-25\",\"matricula\":\"12345\",\"telefono\":\"699699988\",\"password\":\"1234\"}"
				},
				"url": {
					"raw": "{{base_url}}/crearUsuario",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"crearUsuario"
					]
				}
			},
			"response": []
		},
		{
			"name": "Ultimas Mediciones",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"La respuesta tiene cuerpo\", function () { \r",
							"     pm.response.to.be.ok; // equivalente a decir que valide que sea 200\r",
							"     pm.response.to.be.withBody; // body tiene que exitir\r",
							"     pm.response.to.be.json; // además que sea un JSON válido\r",
							"});\r",
							"// Pedimos a nuestro response payload que tengo Content-Type en el header\r",
							"pm.test(\"Content-Type esta presente\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"// Y comprobamos que la petición se haya servido en un determinado tiempo\r",
							"pm.test(\"Tiempo de respuesta menor a  200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"let res_str = pm.response.json();\r",
							"//Comprobamos si hay mediciones suficientes\r",
							"pm.test(\"¿Hay 2 o más mediciones en la base de datos?\", function () {\r",
							"    pm.expect(res_str.mediciones.length).to.be.greaterThan(1);\r",
							"});\r",
							"console.log(\"////////\"+ res_str.mediciones.length);\r",
							"// Y comprobamos que la petición devuelve dos mediciones\r",
							"pm.test(\"Obtener Ultimas Devuelve 2 mediciones\",function(){\r",
							"    pm.expect(res_str.mediciones.length).to.be.equal(2);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/obtenerLasUltimasMediciones?cuantos=2",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"obtenerLasUltimasMediciones"
					],
					"query": [
						{
							"key": "cuantos",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Todas las Mediciones",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"La peticion tiene un cuerpo\", function () { \r",
							"     pm.response.to.be.ok; // equivalente a decir que valide que sea 200\r",
							"     pm.response.to.be.withBody; // body tiene que exitir\r",
							"     pm.response.to.be.json; // además que sea un JSON válido\r",
							"});\r",
							"// Pedimos a nuestro response payload que tengo Content-Type en el header\r",
							"pm.test(\"Existe un header Content-Type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"// Y comprobamos que la petición se haya servido en un determinado tiempo\r",
							"pm.test(\"El tiempo de respuesta es menor 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"let res_str = pm.response.json();\r",
							"//res_str.data.mediciones.length;\r",
							"console.log(\"MEDICIONES EN LA BASE DE DATOS ------>>>>>\" + res_str.mediciones.length);\r",
							"\r",
							"\r",
							"pm.test(\"¿Hay mediciones en la base de datos?\",function(){\r",
							"    pm.expect(res_str.mediciones.length).to.be.greaterThan(0);\r",
							"})\r",
							"\r",
							"\r",
							"    \r",
							"    if(res_str.mediciones[0].hasOwnProperty(\"id\")) {\r",
							"        \r",
							"        pm.test(\"Hay un campo id\", function () {\r",
							"            let valorMedicion = res_str.mediciones[0].id;\r",
							"            pm.expect(valorMedicion).to.be.greaterThan(0);\r",
							"        });\r",
							"    } \r",
							"    \r",
							"    if (res_str.mediciones[0].hasOwnProperty(\"medicion\")) {\r",
							"       \r",
							"            pm.test(\"Hay un campo medicion\", function () {\r",
							"           \r",
							"            pm.expect(0).to.eql(0);//le damos el visto bueno si entra al if\r",
							"        });\r",
							"    }\r",
							"    if (res_str.mediciones[0].hasOwnProperty(\"fecha\")) {\r",
							"       \r",
							"            pm.test(\"Hay un campo fecha\", function () {\r",
							"           \r",
							"            pm.expect(0).to.eql(0);//le damos el visto bueno si entra al if\r",
							"        });\r",
							"    }\r",
							"    if (res_str.mediciones[0].hasOwnProperty(\"hora\")) {\r",
							"       \r",
							"            pm.test(\"Hay un campo hora\", function () {\r",
							"           \r",
							"            pm.expect(0).to.eql(0);//le damos el visto bueno si entra al if\r",
							"        });\r",
							"    }\r",
							"    if (res_str.mediciones[0].hasOwnProperty(\"localizacion_lat\")) {\r",
							"       \r",
							"            pm.test(\"Hay campo localizacion_lat\", function () {\r",
							"           \r",
							"            pm.expect(0).to.eql(0);//le damos el visto bueno si entra al if\r",
							"        });\r",
							"    }\r",
							"    if (res_str.mediciones[0].hasOwnProperty(\"localizacion_lon\")) {\r",
							"       \r",
							"            pm.test(\"Hay campo de valor localizacion_lon\", function () {\r",
							"           \r",
							"            pm.expect(0).to.eql(0);//le damos el visto bueno si entra al if\r",
							"        });\r",
							"    }\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/obtenerTodasLasMediciones",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"obtenerTodasLasMediciones"
					]
				}
			},
			"response": []
		},
		{
			"name": "Insertar Medicion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/**\r",
							" * Autor : Sergi Sirvent Sempere\r",
							" * Fecha: 11/2021\r",
							" * Test del metodo guardarMedicion\r",
							" * \r",
							" */\r",
							"\r",
							"\r",
							"pm.test(\"La respuesta de la peticion es 200\", function () { \r",
							"    \r",
							"     pm.response.to.be.ok; // equivalente a decir que valide que sea 200\r",
							"     \r",
							"});\r",
							"// Pedimos a nuestro response payload que tengo Content-Type en el header\r",
							"pm.test(\"El header de Content-Type esta presente\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"La peticion utiliza el metodo  POST\",function(){\r",
							"    pm.expect(pm.request.method == \"POST\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "",
						"value": "",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \"mediciones\": [\r\n {\r\n \"medicion\": 25545.25,\r\n \"fecha\": \"2021/12/30\",\r\n \"hora\":\"15:00\",\r\n \"localizacion_lat\": 17.1,\r\n \"localizacion_lon\": 15.2,\r\n \"id_sensor\":1,\r\n \"id_tipoMedicion\":4\r\n },\r\n {\r\n\"medicion\": 25545.25,\r\n \"fecha\": \"2021/12/30\",\r\n \"hora\":\"15:00\",\r\n \"localizacion_lat\": 17.2,\r\n \"localizacion_lon\": 15.3,\r\n \"id_sensor\":1,\r\n \"id_tipoMedicion\":4\r\n }\r\n ]\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/insertMedicionJson",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"insertMedicionJson"
					]
				}
			},
			"response": []
		},
		{
			"name": "Mediciones Ultimas 24h",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"La respuesta de la peticion es 200\", function () { \r",
							"    \r",
							"     pm.response.to.be.ok; // equivalente a decir que valide que sea 200\r",
							"     \r",
							"});\r",
							"// Pedimos a nuestro response payload que tengo Content-Type en el header\r",
							"pm.test(\"El header de Content-Type esta presente\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"//comprobamos si la repuesta tiene cuerpo \r",
							"pm.test(\"La respuesta tiene cuerpo\",function(){\r",
							"    pm.expect(pm.response.body != \"\")\r",
							"})\r",
							"\r",
							"//comprobamos que la respuesta no esta vacia\r",
							"pm.test(\"El cuerpo de la respuesta no está vacío\",function(){\r",
							"    pm.expect(pm.response.json.length).to.be.greaterThan(0)\r",
							"})\r",
							"//console.log(pm.response.json.length)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/obtenerMedicionesUltimas24h",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"obtenerMedicionesUltimas24h"
					]
				}
			},
			"response": []
		},
		{
			"name": "Mediciones por usuario y periodo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"La respuesta de la peticion es 200\", function () { \r",
							"    \r",
							"     pm.response.to.be.ok; // equivalente a decir que valide que sea 200\r",
							"     \r",
							"});\r",
							"// Pedimos a nuestro response payload que tengo Content-Type en el header\r",
							"pm.test(\"El header de Content-Type esta presente\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"//comprobamos si la repuesta tiene cuerpo \r",
							"pm.test(\"La respuesta tiene cuerpo\",function(){\r",
							"    pm.expect(pm.response.body != \"\")\r",
							"})\r",
							"//comprobamos que el metodo es get\r",
							"pm.test(\"La peticion tiene metodo GET\",function(){\r",
							"    pm.expect(pm.request.method == \"GET\")\r",
							"})\r",
							"//comprobamos que la respuesta no esta vacia\r",
							"pm.test(\"El cuerpo de la respuesta no está vacío\",function(){\r",
							"    pm.expect(pm.response.json.length).to.be.greaterThan(0)\r",
							"})\r",
							"console.log(pm.response.json)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/obtenerMedicionesConPeriodoPorUsuario?periodo=dia&idUsuario=1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"obtenerMedicionesConPeriodoPorUsuario"
					],
					"query": [
						{
							"key": "periodo",
							"value": "dia"
						},
						{
							"key": "idUsuario",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EditarUsuario",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"La respuesta de la peticion es 200\", function () { \r",
							"    \r",
							"     pm.response.to.be.ok; // equivalente a decir que valide que sea 200\r",
							"     \r",
							"});\r",
							"// Pedimos a nuestro response payload que tengo Content-Type en el header\r",
							"pm.test(\"El header de Content-Type esta presente\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"//comprobamos que hay un body raw en la peticion\r",
							"pm.test(\"El cuerpo de la petición tiene un body raw\",function(){\r",
							"    pm.expect(pm.request.body.raw != \"\")\r",
							"})\r",
							"//console.log(pm.request.body.raw)\r",
							"\r",
							"//comprobamos que el metodo de la peticion es PUT\r",
							"pm.test(\"El metodo de la peticion es PUT\",function(){\r",
							"    pm.expect(pm.request.method == \"PUT\")\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"id_usuario\":1,\"id_sensor\":1,\"mail\":\"testCrear@gmail.com\",\"nombre\":\"test2\",\"apellidos\":\"crear\",\"isAutobusero\":\"False\",\"fechaNacimiento\":\"2002-25-25\",\"matricula\":\"12345\",\"telefono\":\"699699988\",\"password\":\"2323\"}"
				},
				"url": {
					"raw": "{{base_url}}/editarUsuario",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"editarUsuario"
					]
				}
			},
			"response": []
		},
		{
			"name": "PublicarInfoPrivada",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"La respuesta de la peticion es 200\", function () { \r",
							"    \r",
							"     pm.response.to.be.ok; // equivalente a decir que valide que sea 200\r",
							"     \r",
							"});\r",
							"// Pedimos a nuestro response payload que tengo Content-Type en el header\r",
							"pm.test(\"El header de Content-Type esta presente\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"La peticion tiene cuerpo\",function(){\r",
							"    pm.expect(!pm.request.body.isEmpty)\r",
							"})\r",
							"pm.test(\"La peticion utiliza el metodo  POST\",function(){\r",
							"    pm.expect(pm.request.method == \"POST\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"id_usuario\":23,\"id_sensor\":1,\"telefono\":\"23\",\"distancia_recorrida\":54,\"nombre\":\"Sergi\",\"minutos_activo\":\"23\"}"
				},
				"url": {
					"raw": "{{base_url}}/publicarInfoPrivada",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"publicarInfoPrivada"
					]
				}
			},
			"response": []
		},
		{
			"name": "LoginUsuario",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"La respuesta tiene cuerpo\", function () { \r",
							"     pm.response.to.be.ok; // equivalente a decir que valide que sea 200\r",
							"     pm.response.to.be.withBody; // body tiene que exitir\r",
							"     pm.response.to.be.json; // además que sea un JSON válido\r",
							"});\r",
							"// Pedimos a nuestro response payload que tengo Content-Type en el header\r",
							"pm.test(\"Existe un header Content-Type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"// Y comprobamos que la petición se haya servido en un determinado tiempo\r",
							"pm.test(\"El tiempo de respuesta es menor 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"let res_str = pm.response.json();\r",
							"console.log(res_str.apellidos)\r",
							"\r",
							"if(res_str.hasOwnProperty(\"apellidos\")) {\r",
							"        \r",
							"        pm.test(\"Hay un campo apellidos\", function () {\r",
							"            pm.expect(1).to.be.greaterThan(0);\r",
							"        });\r",
							"}\r",
							"if(res_str.hasOwnProperty(\"edad\")) {\r",
							"        \r",
							"        pm.test(\"Hay un campo edad\", function () {\r",
							"            pm.expect(1).to.be.greaterThan(0);\r",
							"        });\r",
							"}\r",
							"if(res_str.hasOwnProperty(\"id\")) {\r",
							"        \r",
							"        pm.test(\"Hay un campo id\", function () {\r",
							"            pm.expect(1).to.be.greaterThan(0);\r",
							"        });\r",
							"}\r",
							"if(res_str.hasOwnProperty(\"isAutobusero\")) {\r",
							"        \r",
							"        pm.test(\"Hay un campo isAutobusero\", function () {\r",
							"            pm.expect(1).to.be.greaterThan(0);\r",
							"        });\r",
							"}\r",
							"if(res_str.hasOwnProperty(\"mail\")) {\r",
							"        \r",
							"        pm.test(\"Hay un campo mail\", function () {\r",
							"            pm.expect(1).to.be.greaterThan(0);\r",
							"        });\r",
							"}\r",
							"if(res_str.hasOwnProperty(\"matricula\")) {\r",
							"        \r",
							"        pm.test(\"Hay un campo matricula\", function () {\r",
							"            pm.expect(1).to.be.greaterThan(0);\r",
							"        });\r",
							"}\r",
							"if(res_str.hasOwnProperty(\"nombre\")) {\r",
							"        \r",
							"        pm.test(\"Hay un campo nombre\", function () {\r",
							"            pm.expect(1).to.be.greaterThan(0);\r",
							"        });\r",
							"}  \r",
							"if(res_str.hasOwnProperty(\"password\")) {\r",
							"        \r",
							"        pm.test(\"Hay un campo password\", function () {\r",
							"            pm.expect(1).to.be.greaterThan(0);\r",
							"        });\r",
							"}\r",
							"if(res_str.hasOwnProperty(\"telefono\")) {\r",
							"        \r",
							"        pm.test(\"Hay un campo telefono\", function () {\r",
							"            pm.expect(1).to.be.greaterThan(0);\r",
							"        });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{base_url}}/loginUsuario?mail=alberto@gmail.com&pass=123",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"loginUsuario"
					],
					"query": [
						{
							"key": "mail",
							"value": "alberto@gmail.com"
						},
						{
							"key": "pass",
							"value": "123"
						}
					]
				}
			},
			"response": []
		}
	]
}